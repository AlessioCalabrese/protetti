import{BALL_RADIUS,COLORS,MORTALITY_PERCENTATGE,SYMPTOMATIC_PERCENTAGE,TICKS_TO_RECOVER,RUN,SPEED,MAXSPEED,STATES}from"./options.js";import{checkCollision,calculateChangeDirection}from"./collisions.js";const diameter=2*BALL_RADIUS;export class Ball{constructor({x:t,y:s,id:e,state:i,sketch:h,hasMovement:a,has_app_installed:n}){this.x=t,this.y=s,this.vx=h.random(-1,1)*SPEED,this.vy=h.random(-1,1)*SPEED,this.sketch=h,this.id=e,this.state=i,this.timeInfected=0,this.hasMovement=a,this.hasCollision=!0,this.survivor=!1,this.hasAppInstalled=n,this.contacts=[],this.feelSick=null}checkState(){if(this.state===STATES.infected||this.state===STATES.quarantine){if(RUN.filters.death&&!this.survivor&&this.timeInfected>=TICKS_TO_RECOVER/2&&(this.survivor=this.sketch.random(100)>=MORTALITY_PERCENTATGE,!this.survivor)){this.hasMovement=!1;const t=this.state;return this.state=STATES.death,RUN.results[t]--,void RUN.results[STATES.death]++}if(this.hasAppInstalled&&(this.hasMovement=!1),this.timeInfected>=TICKS_TO_RECOVER){const t=this.state;this.state=STATES.recovered,RUN.results[t]--,RUN.results[STATES.recovered]++,this.hasMovement=!0}else this.timeInfected++}if(this.state===STATES.infected&&null===this.feelSick&&this.timeInfected>=TICKS_TO_RECOVER/3&&(this.feelSick=SYMPTOMATIC_PERCENTAGE>=this.sketch.random(100),this.feelSick))return this.state=STATES.quarantine,RUN.results[STATES.infected]--,void RUN.results[STATES.quarantine]++;if(this.state===STATES.quarantine&&this.hasAppInstalled){for(let t=0;t<this.contacts.length;t++){const s=this.contacts[t];s.hasAppInstalled&&s.state===STATES.infected&&(s.contacts.splice(s.contacts.indexOf(this),1),s.state=STATES.quarantine,RUN.results[STATES.infected]--,RUN.results[STATES.quarantine]++)}this.contacts=[]}}checkCollisions({others:t}){if(this.state!==STATES.death)for(let s=this.id+1;s<t.length;s++){const e=t[s],{state:i,x:h,y:a}=e;if(i===STATES.death)continue;const n=h-this.x,S=a-this.y;if(checkCollision({dx:n,dy:S,diameter:2*BALL_RADIUS})){const{ax:t,ay:s}=calculateChangeDirection({dx:n,dy:S});if(this.vx-=t,this.vy-=s,e.vx=t,e.vy=s,this.vx=Math.max(Math.min(this.vx,MAXSPEED),-MAXSPEED),this.vy=Math.max(Math.min(this.vy,MAXSPEED),-MAXSPEED),e.vx=Math.max(Math.min(e.vx,MAXSPEED),-MAXSPEED),e.vy=Math.max(Math.min(e.vy,MAXSPEED),-MAXSPEED),this.state===i)return;if(this.state===STATES.recovered||i===STATES.recovered)return;if(this.state===STATES.quarantine||i===STATES.quarantine)return;this.state!==STATES.infected&&i!==STATES.infected||(-1===this.contacts.indexOf(e)&&(this.contacts.push(e),e.contacts.push(this)),this.state=e.state=STATES.infected,RUN.results[STATES.infected]++,RUN.results[STATES.well]--)}}}move(){this.hasMovement&&(this.x+=this.vx,this.y+=this.vy,(this.x+BALL_RADIUS>this.sketch.width&&this.vx>0||this.x-BALL_RADIUS<0&&this.vx<0)&&(this.vx*=-1),(this.y+BALL_RADIUS>this.sketch.height&&this.vy>0||this.y-BALL_RADIUS<0&&this.vy<0)&&(this.vy*=-1))}render(){const t=COLORS[this.state];this.sketch.noStroke(),this.sketch.fill(t),this.sketch.ellipse(this.x,this.y,diameter,diameter),this.hasAppInstalled&&(this.sketch.fill(COLORS.app_installed),this.sketch.ellipse(this.x,this.y,4,4))}}
