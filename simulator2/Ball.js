import{BALL_RADIUS,COLORS,BORDER_COLOR_WITH_APP,MORTALITY_PERCENTATGE,TICKS_TO_RECOVER,RUN,SPEED,STATES}from"./options.js";import{checkCollision,calculateChangeDirection}from"./collisions.js";const diameter=2*BALL_RADIUS;export class Ball{constructor({x:t,y:s,id:e,state:i,sketch:h,hasMovement:a,hasApp:o}){this.x=t,this.y=s,this.vx=h.random(-1,1)*SPEED,this.vy=h.random(-1,1)*SPEED,this.sketch=h,this.id=e,this.state=i,this.timeInfected=0,this.hasMovement=a,this.hasApp=o,this.hasCollision=!0,this.survivor=!1}checkState(){if(this.state===STATES.infected){if(RUN.filters.death&&!this.survivor&&this.timeInfected>=TICKS_TO_RECOVER/2&&(this.survivor=this.sketch.random(100)>=MORTALITY_PERCENTATGE,!this.survivor))return this.hasMovement=!1,this.state=STATES.death,RUN.results[STATES.infected]--,void RUN.results[STATES.death]++;this.timeInfected>=TICKS_TO_RECOVER?(this.state=STATES.recovered,RUN.results[STATES.infected]--,RUN.results[STATES.recovered]++,this.hasMovement=!0):this.timeInfected++}}checkCollisions({others:t}){if(this.state!==STATES.death)for(let s=this.id+1;s<t.length;s++){const e=t[s],{state:i,x:h,y:a,hasApp:o}=e;if(i===STATES.death)continue;const r=h-this.x,n=a-this.y;if(checkCollision({dx:r,dy:n,diameter:2*BALL_RADIUS})){const{ax:t,ay:s}=calculateChangeDirection({dx:r,dy:n});if(this.hasMovement&&(this.vx-=t,this.vy-=s),e.hasMovement&&(e.vx=t,e.vy=s),this.state===i)return;if(this.state===STATES.recovered||i===STATES.recovered)return;if((this.state===STATES.infected||i===STATES.infected)&&(this.state=e.state=STATES.infected,RUN.results[STATES.infected]++,RUN.results[STATES.well]--,this.hasApp&&o)){const t=100*Math.random()<RUN.filters.appFailurePercentage,s=100*Math.random()<RUN.filters.autoIsolationPercentage;!t&&s&&(i===STATES.infected?this.hasMovement=!1:e.hasMovement=!1)}}}}move(){this.hasMovement&&(this.x+=this.vx,this.y+=this.vy,(this.x+BALL_RADIUS>this.sketch.width&&this.vx>0||this.x-BALL_RADIUS<0&&this.vx<0)&&(this.vx*=-1),(this.y+BALL_RADIUS>this.sketch.height&&this.vy>0||this.y-BALL_RADIUS<0&&this.vy<0)&&(this.vy*=-1))}render(){const t=COLORS[this.state];this.hasApp?this.sketch.stroke(BORDER_COLOR_WITH_APP):this.sketch.noStroke(),this.sketch.fill(t),this.sketch.ellipse(this.x,this.y,diameter,diameter)}}
